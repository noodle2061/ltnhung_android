package com.example.nhandientienghet;

import android.Manifest;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.media.AudioAttributes;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.PowerManager;
import android.provider.Settings;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

// Firebase Firestore imports
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.EventListener;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.firebase.firestore.ListenerRegistration;
import com.google.firebase.firestore.MetadataChanges; // Import MetadataChanges if needed for offline handling

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Map;

public class MainActivity extends AppCompatActivity implements MediaPlayer.OnPreparedListener, MediaPlayer.OnErrorListener, MediaPlayer.OnCompletionListener {

    private static final String TAG = "MainActivity";
    public static boolean isActivityVisible;

    // --- UI Components ---
    private TextView tvGreeting;
    private TextView tvDeviceStatusLabel;
    private TextView tvDeviceStatus;
    private TextView tvLastNoiseTimeLabel;
    private TextView tvLastNoiseTime;
    private ImageButton btnMainPlayPause;
    private ProgressBar progressBarMainAudio;
    private Button btnViewChart;
    private Button btnViewHistory;

    // --- Broadcast Receivers ---
    private BroadcastReceiver playAudioReceiver;
    private IntentFilter playAudioFilter;

    // --- MediaPlayer Components ---
    private MediaPlayer lastAudioMediaPlayer;
    private String lastReceivedAudioUrl = null;
    // private String lastDeviceIp = null; // <<< REMOVED: No longer needed for single device
    private boolean isLastAudioPlaying = false;
    private boolean isLastAudioPrepared = false;
    private Handler lastAudioProgressHandler;
    private Runnable lastAudioProgressRunnable;

    // --- Firestore Components ---
    private FirebaseFirestore db;
    private ListenerRegistration deviceStatusListenerRegistration;
    private static final String DEVICE_STATUS_COLLECTION = "device_status"; // Match server
    private static final String SINGLE_DEVICE_ID = "main_esp32_device"; // Fixed ID for the single device

    // --- Permission Launcher ---
    private final ActivityResultLauncher<String> requestPermissionLauncher =
            registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
                if (isGranted) {
                    Log.i(TAG, "POST_NOTIFICATIONS permission granted.");
                } else {
                    Log.w(TAG, "POST_NOTIFICATIONS permission denied.");
                    showPermissionDeniedDialog();
                }
            });


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d(TAG, "onCreate");
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_main);

        // --- Initialize UI Views ---
        tvGreeting = findViewById(R.id.tvGreeting);
        tvDeviceStatusLabel = findViewById(R.id.tvDeviceStatusLabel);
        tvDeviceStatus = findViewById(R.id.tvDeviceStatus);
        tvLastNoiseTimeLabel = findViewById(R.id.tvLastNoiseTimeLabel);
        tvLastNoiseTime = findViewById(R.id.tvLastNoiseTime);
        btnMainPlayPause = findViewById(R.id.btnMainPlayPause);
        progressBarMainAudio = findViewById(R.id.progressBarMainAudio);
        btnViewChart = findViewById(R.id.btnViewChart);
        btnViewHistory = findViewById(R.id.btnViewHistory);

        // --- Initialize Firestore ---
        db = FirebaseFirestore.getInstance();

        // --- Apply Window Insets ---
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        // --- Setup Button Click Listeners ---
        btnMainPlayPause.setOnClickListener(v -> togglePlayPauseLastAudio());
        btnViewChart.setOnClickListener(v -> { /* ... */ });
        btnViewHistory.setOnClickListener(v -> { /* ... */ });

        // --- Setup Broadcast Receivers ---
        playAudioReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                String action = intent.getAction();
                Log.d(TAG, "PlayAudioReceiver onReceive triggered with action: " + action);
                if (MyFirebaseMessagingService.ACTION_PLAY_AUDIO_NOW.equals(action)) {
                    String urlToPlay = intent.getStringExtra(MyFirebaseMessagingService.EXTRA_AUDIO_URL);
                    // String deviceIp = intent.getStringExtra("ip"); // IP no longer needed for status listener

                    if (urlToPlay != null && !urlToPlay.isEmpty()) {
                        Log.i(TAG, "Received PLAY_AUDIO_NOW broadcast for URL: " + urlToPlay);
                        stopBackgroundPlaybackService();
                        resetLastAudioPlaybackState();

                        lastReceivedAudioUrl = urlToPlay;
                        // lastDeviceIp = deviceIp; // <<< REMOVED
                        // startListeningForDeviceStatus(); // <<< MOVED to onStart
                        updateLastNoiseTime();
                        updateAudioControlsVisibility(true);
                    } else {
                        Log.w(TAG, "Received PLAY_AUDIO_NOW broadcast without URL.");
                    }
                }
            }
        };
        playAudioFilter = new IntentFilter(MyFirebaseMessagingService.ACTION_PLAY_AUDIO_NOW);

        // --- Initialize Handler for Last Audio Progress ---
        lastAudioProgressHandler = new Handler(Looper.getMainLooper());
        lastAudioProgressRunnable = new Runnable() {
            @Override
            public void run() {
                // ... (keep runnable code)
                if (lastAudioMediaPlayer != null && isLastAudioPlaying && isLastAudioPrepared) {
                    try {
                        int currentPosition = lastAudioMediaPlayer.getCurrentPosition();
                        int duration = lastAudioMediaPlayer.getDuration();
                        if (duration > 0) {
                            int progress = (int) (((float) currentPosition / duration) * 100);
                            progressBarMainAudio.setProgress(progress);
                        }
                        lastAudioProgressHandler.postDelayed(this, 500);
                    } catch (IllegalStateException e) {
                        Log.e(TAG, "IllegalStateException while getting MediaPlayer position/duration for last audio", e);
                        stopLastAudioProgressUpdater();
                    }
                } else {
                    stopLastAudioProgressUpdater();
                }
            }
        };

        // --- Initial Setup ---
        askNotificationPermission();
        handleIntent(getIntent());
        updateAudioControlsVisibility(lastReceivedAudioUrl != null);
        updateDeviceStatus(getString(R.string.device_status_unknown));

        // <<< CALL Listener setup here or in onStart >>>
        // startListeningForDeviceStatus(); // Can be called here
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        Log.d(TAG, "onNewIntent called with intent: " + intent);
        setIntent(intent);
        handleIntent(intent);
    }

    // Processes the intent to extract the audio URL
    private void handleIntent(Intent intent) {
        Log.d(TAG, "Handling intent: " + intent);
        if (intent != null && intent.hasExtra(MyFirebaseMessagingService.EXTRA_AUDIO_URL)) {
            String receivedUrl = intent.getStringExtra(MyFirebaseMessagingService.EXTRA_AUDIO_URL);
            // String deviceIp = intent.getStringExtra("ip"); // <<< REMOVED

            Log.i(TAG, "Received Audio URL from Intent for main card: " + receivedUrl);

            if (receivedUrl != null && !receivedUrl.equals(lastReceivedAudioUrl)) {
                stopBackgroundPlaybackService();
                resetLastAudioPlaybackState();
                lastReceivedAudioUrl = receivedUrl;
                // lastDeviceIp = deviceIp; // <<< REMOVED
                // startListeningForDeviceStatus(); // <<< MOVED to onStart
                updateLastNoiseTime();
                updateAudioControlsVisibility(true);
            } else if (lastReceivedAudioUrl == null && receivedUrl != null) {
                stopBackgroundPlaybackService();
                lastReceivedAudioUrl = receivedUrl;
                // lastDeviceIp = deviceIp; // <<< REMOVED
                // startListeningForDeviceStatus(); // <<< MOVED to onStart
                updateLastNoiseTime();
                updateAudioControlsVisibility(true);
            } else {
                Log.d(TAG, "Received URL is the same as current last URL or null.");
                stopBackgroundPlaybackService();
                // startListeningForDeviceStatus(); // Ensure listener is active - MOVED to onStart
                updateAudioControlsVisibility(lastReceivedAudioUrl != null);
            }
        } else {
            Log.d(TAG, "Intent does not contain EXTRA_AUDIO_URL for main card.");
            // startListeningForDeviceStatus(); // Ensure listener is active - MOVED to onStart
            updateAudioControlsVisibility(lastReceivedAudioUrl != null);
        }
    }

    @Override
    protected void onStart() {
        super.onStart();
        Log.d(TAG, "onStart - Registering receivers and listener");
        isActivityVisible = true;
        LocalBroadcastManager.getInstance(this).registerReceiver(playAudioReceiver, playAudioFilter);
        stopBackgroundPlaybackService();

        // <<< START Firestore listener here >>>
        startListeningForDeviceStatus();
    }

    @Override
    protected void onStop() {
        super.onStop();
        Log.d(TAG, "onStop - Unregistering receivers and listener");
        isActivityVisible = false;
        LocalBroadcastManager.getInstance(this).unregisterReceiver(playAudioReceiver);

        // <<< STOP Firestore listener here >>>
        stopListeningForDeviceStatus();
    }

    // --- onPause, onResume, onDestroy (Keep audio pause/release logic) ---
    @Override
    protected void onPause() { /* ... keep existing code ... */
        super.onPause();
        Log.d(TAG, "onPause");
        isActivityVisible = false;
        if (lastAudioMediaPlayer != null && isLastAudioPlaying) {
            try {
                lastAudioMediaPlayer.pause();
                isLastAudioPlaying = false;
                stopLastAudioProgressUpdater();
                btnMainPlayPause.setImageResource(android.R.drawable.ic_media_play);
                Log.i(TAG, "Last audio paused due to Activity pause.");
            } catch (IllegalStateException e) {
                Log.e(TAG, "Error pausing lastAudioMediaPlayer onPause", e);
            }
        }
    }
    @Override
    protected void onResume() { /* ... keep existing code ... */
        super.onResume();
        Log.d(TAG, "onResume");
        isActivityVisible = true;
        stopBackgroundPlaybackService();
    }
    @Override
    protected void onDestroy() { /* ... keep existing code ... */
        super.onDestroy();
        Log.d(TAG, "onDestroy");
        isActivityVisible = false;
        stopLastAudioProgressUpdater();
        releaseLastAudioMediaPlayer();
        stopListeningForDeviceStatus(); // Ensure listener is stopped
    }


    // --- Permission Handling (Keep as is) ---
    private void askNotificationPermission() { /* ... keep existing code ... */
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS) == PackageManager.PERMISSION_GRANTED) { Log.i(TAG, "POST_NOTIFICATIONS permission already granted."); }
            else if (shouldShowRequestPermissionRationale(Manifest.permission.POST_NOTIFICATIONS)) {
                new AlertDialog.Builder(this) .setTitle(R.string.permission_needed_title) .setMessage(R.string.permission_needed_message)
                        .setPositiveButton(android.R.string.ok, (dialog, which) -> requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS))
                        .setNegativeButton(R.string.cancel, (dialog, which) -> Log.w(TAG,"User cancelled permission rationale dialog.")) .show();
            } else { requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS); }
        } else { Log.i(TAG, "POST_NOTIFICATIONS permission not required on this Android version."); }
    }
    private void showPermissionDeniedDialog() { /* ... keep existing code ... */
        new AlertDialog.Builder(this) .setTitle(R.string.permission_needed_title) .setMessage(R.string.permission_needed_message)
                .setPositiveButton(R.string.settings, (dialog, which) -> { Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS); Uri uri = Uri.fromParts("package", getPackageName(), null); intent.setData(uri); startActivity(intent); })
                .setNegativeButton(R.string.cancel, (dialog, which) -> dialog.dismiss()) .show();
    }

    // --- Main Card Audio Player Handling (Keep methods as they are) ---
    private void togglePlayPauseLastAudio() { /* ... keep existing code ... */
        if (lastReceivedAudioUrl == null || lastReceivedAudioUrl.isEmpty()) { Toast.makeText(this, R.string.no_audio_url, Toast.LENGTH_SHORT).show(); updateAudioControlsVisibility(false); return; }
        stopBackgroundPlaybackService();
        if (lastAudioMediaPlayer != null && isLastAudioPlaying) {
            try { lastAudioMediaPlayer.pause(); isLastAudioPlaying = false; stopLastAudioProgressUpdater(); btnMainPlayPause.setImageResource(android.R.drawable.ic_media_play); Log.i(TAG, "Last audio paused."); }
            catch (IllegalStateException e) { Log.e(TAG, "Error pausing lastAudioMediaPlayer", e); handleLastAudioError("Lỗi khi tạm dừng"); }
        } else if (lastAudioMediaPlayer != null && isLastAudioPrepared) {
            try { lastAudioMediaPlayer.start(); isLastAudioPlaying = true; startLastAudioProgressUpdater(); btnMainPlayPause.setImageResource(android.R.drawable.ic_media_pause); Log.i(TAG, "Last audio resumed."); }
            catch (IllegalStateException e) { Log.e(TAG, "Error resuming lastAudioMediaPlayer", e); handleLastAudioError("Lỗi khi tiếp tục phát"); }
        } else { initializeAndPlayLastAudio(lastReceivedAudioUrl); }
    }
    private void initializeAndPlayLastAudio(String url) { /* ... keep existing code ... */
        resetLastAudioPlaybackState(); Log.i(TAG, "Initializing lastAudioMediaPlayer for URL: " + url); updateAudioControlsVisibility(true); progressBarMainAudio.setProgress(0); btnMainPlayPause.setEnabled(false); btnMainPlayPause.setImageResource(android.R.drawable.ic_media_play); Toast.makeText(this, R.string.audio_preparing, Toast.LENGTH_SHORT).show();
        lastAudioMediaPlayer = new MediaPlayer(); lastAudioMediaPlayer.setAudioAttributes( new AudioAttributes.Builder() .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC) .setUsage(AudioAttributes.USAGE_MEDIA) .build() );
        try { lastAudioMediaPlayer.setWakeMode(getApplicationContext(), PowerManager.PARTIAL_WAKE_LOCK); } catch (SecurityException e) { Log.w(TAG, "Missing WAKE_LOCK permission", e); }
        try { lastAudioMediaPlayer.setDataSource(url); lastAudioMediaPlayer.setOnPreparedListener(this); lastAudioMediaPlayer.setOnErrorListener(this); lastAudioMediaPlayer.setOnCompletionListener(this); lastAudioMediaPlayer.prepareAsync(); Log.i(TAG, "lastAudioMediaPlayer preparing..."); }
        catch (IOException | IllegalArgumentException | SecurityException | IllegalStateException e) { Log.e(TAG, "Error initializing lastAudioMediaPlayer", e); handleLastAudioError(String.format(getString(R.string.error_playing_audio), e.getMessage())); }
    }
    @Override
    public void onPrepared(MediaPlayer mp) { /* ... keep existing code ... */
        if (mp == lastAudioMediaPlayer) { Log.i(TAG, "lastAudioMediaPlayer prepared."); isLastAudioPrepared = true; btnMainPlayPause.setEnabled(true);
            try { mp.start(); isLastAudioPlaying = true; startLastAudioProgressUpdater(); btnMainPlayPause.setImageResource(android.R.drawable.ic_media_pause); Log.i(TAG, "Last audio playback started."); }
            catch (IllegalStateException e) { Log.e(TAG, "IllegalStateException on start()", e); handleLastAudioError(String.format(getString(R.string.error_playing_audio), "Lỗi khi bắt đầu phát")); }
        } else { Log.w(TAG, "onPrepared called for unknown MediaPlayer"); }
    }
    @Override
    public boolean onError(MediaPlayer mp, int what, int extra) { /* ... keep existing code ... */
        if (mp == lastAudioMediaPlayer) { Log.e(TAG, "lastAudioMediaPlayer Error: what=" + what + ", extra=" + extra); String errorMsg = getMediaPlayerErrorString(what, extra); handleLastAudioError(String.format(getString(R.string.error_playing_audio), errorMsg)); return true; }
        else { Log.w(TAG, "onError called for unknown MediaPlayer"); return false; }
    }
    @Override
    public void onCompletion(MediaPlayer mp) { /* ... keep existing code ... */
        if (mp == lastAudioMediaPlayer) { Log.i(TAG, "lastAudioMediaPlayer playback completed."); resetLastAudioPlaybackState(); Toast.makeText(this, R.string.audio_completed, Toast.LENGTH_SHORT).show(); }
        else { Log.w(TAG, "onCompletion called for unknown MediaPlayer"); }
    }
    private void releaseLastAudioMediaPlayer() { /* ... keep existing code ... */
        if (lastAudioMediaPlayer != null) { Log.d(TAG, "Releasing lastAudioMediaPlayer."); try { if (lastAudioMediaPlayer.isPlaying()) { lastAudioMediaPlayer.stop(); } lastAudioMediaPlayer.reset(); lastAudioMediaPlayer.release(); } catch (Exception e) { Log.e(TAG, "Error releasing lastAudioMediaPlayer", e); } finally { lastAudioMediaPlayer = null; isLastAudioPrepared = false; isLastAudioPlaying = false; Log.i(TAG, "lastAudioMediaPlayer released."); } }
    }
    private void resetLastAudioPlaybackState() { /* ... keep existing code ... */
        Log.d(TAG, "Resetting last audio playback state."); releaseLastAudioMediaPlayer(); stopLastAudioProgressUpdater();
        runOnUiThread(() -> { if (btnMainPlayPause != null) { btnMainPlayPause.setImageResource(android.R.drawable.ic_media_play); btnMainPlayPause.setEnabled(lastReceivedAudioUrl != null && !lastReceivedAudioUrl.isEmpty()); } if (progressBarMainAudio != null) { progressBarMainAudio.setProgress(0); progressBarMainAudio.setVisibility( (lastReceivedAudioUrl != null && !lastReceivedAudioUrl.isEmpty()) ? View.VISIBLE : View.INVISIBLE); } });
    }
    private void handleLastAudioError(String logMessageForUser) { /* ... keep existing code ... */
        Log.e(TAG, "lastAudioMediaPlayer Error: " + logMessageForUser); resetLastAudioPlaybackState(); runOnUiThread(() -> { Toast.makeText(MainActivity.this, logMessageForUser, Toast.LENGTH_LONG).show(); updateAudioControlsVisibility(lastReceivedAudioUrl != null); });
    }
    private String getMediaPlayerErrorString(int what, int extra) { /* ... keep existing code ... */
        String ws, es; switch (what) { case MediaPlayer.MEDIA_ERROR_UNKNOWN: ws = "MEDIA_ERROR_UNKNOWN"; break; case MediaPlayer.MEDIA_ERROR_SERVER_DIED: ws = "MEDIA_ERROR_SERVER_DIED"; break; default: ws = "Error code: " + what; }
        switch (extra) { case MediaPlayer.MEDIA_ERROR_IO: es = "MEDIA_ERROR_IO"; break; case MediaPlayer.MEDIA_ERROR_MALFORMED: es = "MEDIA_ERROR_MALFORMED"; break; case MediaPlayer.MEDIA_ERROR_UNSUPPORTED: es = "MEDIA_ERROR_UNSUPPORTED"; break; case MediaPlayer.MEDIA_ERROR_TIMED_OUT: es = "MEDIA_ERROR_TIMED_OUT"; break; case -2147483648: es = "MEDIA_ERROR_SYSTEM (-2147483648)"; break; default: es = "Extra code: " + extra; } return ws + " (" + es + ")";
    }

    // --- Progress Updater Handling (Keep methods as they are) ---
    private void startLastAudioProgressUpdater() { /* ... keep existing code ... */ stopLastAudioProgressUpdater(); lastAudioProgressHandler.post(lastAudioProgressRunnable); Log.d(TAG, "Started last audio progress updater."); }
    private void stopLastAudioProgressUpdater() { /* ... keep existing code ... */ lastAudioProgressHandler.removeCallbacks(lastAudioProgressRunnable); Log.d(TAG, "Stopped last audio progress updater."); }

    // --- UI Update Helpers (Keep methods as they are) ---
    private void updateAudioControlsVisibility(boolean show) { /* ... keep existing code ... */ runOnUiThread(() -> { int v = show ? View.VISIBLE : View.INVISIBLE; if (btnMainPlayPause != null) { btnMainPlayPause.setVisibility(v); btnMainPlayPause.setEnabled(show); } if (progressBarMainAudio != null) { progressBarMainAudio.setVisibility(v); if (!show) progressBarMainAudio.setProgress(0); } }); }
    private void updateLastNoiseTime() { /* ... keep existing code ... */ runOnUiThread(() -> { if (tvLastNoiseTime != null) { if (lastReceivedAudioUrl != null) { SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.getDefault()); tvLastNoiseTime.setText(sdf.format(new Date())); } else { tvLastNoiseTime.setText(R.string.last_noise_time_none); } } }); }
    private void updateDeviceStatus(String status) { /* ... keep existing code ... */ runOnUiThread(() -> { if (tvDeviceStatus != null) { String ds; int sc; if ("online".equalsIgnoreCase(status)) { ds = getString(R.string.device_status_online); sc = ContextCompat.getColor(this, android.R.color.holo_green_dark); } else if ("offline".equalsIgnoreCase(status)) { ds = getString(R.string.device_status_offline); sc = ContextCompat.getColor(this, android.R.color.holo_red_dark); } else { ds = getString(R.string.device_status_unknown); sc = ContextCompat.getColor(this, android.R.color.darker_gray); } tvDeviceStatus.setText(ds); tvDeviceStatus.setTextColor(sc); } }); }

    // --- Firestore Listener Methods (Simplified) ---

    /**
     * Starts listening for status changes on the single device document in Firestore.
     */
    private void startListeningForDeviceStatus() {
        // Stop any previous listener
        stopListeningForDeviceStatus();

        // Get reference to the fixed document ID
        final DocumentReference docRef = db.collection(DEVICE_STATUS_COLLECTION).document(SINGLE_DEVICE_ID);

        Log.i(TAG, "Starting Firestore listener for single device status: " + SINGLE_DEVICE_ID);
        // Register the listener
        // Include MetadataChanges to potentially handle offline cache updates immediately
        deviceStatusListenerRegistration = docRef.addSnapshotListener(MetadataChanges.INCLUDE, new EventListener<DocumentSnapshot>() {
            @Override
            public void onEvent(@Nullable DocumentSnapshot snapshot,
                                @Nullable FirebaseFirestoreException e) {
                if (e != null) {
                    Log.w(TAG, "Device status listen failed.", e);
                    // Update UI to unknown or error state
                    updateDeviceStatus(getString(R.string.device_status_unknown));
                    return;
                }

                String source = snapshot != null && snapshot.getMetadata().hasPendingWrites()
                        ? "Local" : "Server";

                if (snapshot != null && snapshot.exists()) {
                    Log.d(TAG, source + " data: " + snapshot.getData());
                    // Get status from the document
                    Map<String, Object> data = snapshot.getData();
                    if (data != null && data.containsKey("status")) {
                        String status = (String) data.get("status");
                        if (status != null) {
                            updateDeviceStatus(status); // Update UI
                        } else {
                            updateDeviceStatus(getString(R.string.device_status_unknown));
                        }
                    } else {
                        // Document exists but no 'status' field? Treat as unknown.
                        updateDeviceStatus(getString(R.string.device_status_unknown));
                    }
                } else {
                    Log.d(TAG, source + " data: null - Document '" + SINGLE_DEVICE_ID + "' does not exist.");
                    // If the document doesn't exist, assume offline or unknown
                    updateDeviceStatus(getString(R.string.device_status_unknown));
                }
            }
        });
    }

    /**
     * Stops listening for status changes on Firestore.
     */
    private void stopListeningForDeviceStatus() {
        if (deviceStatusListenerRegistration != null) {
            Log.i(TAG, "Stopping Firestore listener for device status.");
            deviceStatusListenerRegistration.remove();
            deviceStatusListenerRegistration = null; // Mark as stopped
        }
    }

    // --- Background Service Control (Keep as is) ---
    private void stopBackgroundPlaybackService() { /* ... keep existing code ... */ Log.d(TAG, "Requesting to stop AudioPlaybackService."); Intent stopIntent = new Intent(this, AudioPlaybackService.class); stopIntent.setAction(AudioPlaybackService.ACTION_STOP); stopService(stopIntent); }
}
